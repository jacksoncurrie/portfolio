/**
 * @version 1.0
 * @author jc13342
 */
package move;

// Libraries
import java.awt.Color; // Colours for GUI
import javax.swing.JOptionPane; // Information pop-ups for prompts

/**
 * GUI to run game on
 */
public class Move extends javax.swing.JFrame {

    /**
     * The game, run form the UI
     */
    Game game;

    /**
     * Keeps count of items collected
     */
    int pickaxe = 0;

    /**
     * Creates new form Move
     */
    public Move() {
        // Create UI
        initComponents();
        // Start new game
        game = new Game();
        // Display Instuctions on how to play
        JOptionPane.showMessageDialog( null, "You have woken up in a mine shaft.\n"
                                             + "Make sure to remember the names of the rooms. You'll need to use\n"
                                             + "your memory to discover the map, and get to the exit on the\n"
                                             + "opposite side." );
        JOptionPane.showMessageDialog( null, "Try and find the pickaxe head and handle, with both of them you can mine in\n"
                                             + "any direction. But, there must be a room on the other side to successfully mine into it.\n"
                                             + "If there is not a room, you will remain where you are, and will add on two turns." );
        JOptionPane.showMessageDialog( null, "You will have to mine into the end room, which is hidden.\n"
                                             + "Try to escape in as little amount of moves as possible.\n"
                                             + "Good luck!" );

        // Set UI up for first room
        checkRoom();
    }

    /**
     * This method is called from within the constructor to initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        movePanel = new javax.swing.JPanel();
        northButton = new javax.swing.JButton();
        southButton = new javax.swing.JButton();
        eastButton = new javax.swing.JButton();
        roomNameLabel = new javax.swing.JLabel();
        restartButton = new javax.swing.JButton();
        turnsTextLabel = new javax.swing.JLabel();
        turnsNumberLabel = new javax.swing.JLabel();
        roomImage = new javax.swing.JLayeredPane();
        northDoorLabel = new javax.swing.JLabel();
        eastDoorLabel = new javax.swing.JLabel();
        southDoorLabel = new javax.swing.JLabel();
        westDoorLabel = new javax.swing.JLabel();
        roomImageLabel = new javax.swing.JLabel();
        westButton = new javax.swing.JButton();
        pickaxeLabel = new javax.swing.JLabel();
        pickaxeButton = new javax.swing.JButton();
        pickaxeHeadImage = new javax.swing.JLabel();
        pickaxeHandleImage = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Move");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setIconImages(null);
        setPreferredSize(new java.awt.Dimension(750, 600));
        setSize(new java.awt.Dimension(750, 600));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        movePanel.setBorder(javax.swing.BorderFactory.createBevelBorder(0));
        movePanel.setAlignmentX(0.0F);
        movePanel.setAlignmentY(0.0F);

        northButton.setFont(new java.awt.Font("Open Sans", 1, 12)); // NOI18N
        northButton.setForeground(new java.awt.Color(255, 92, 92));
        northButton.setText("North");
        northButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        northButton.setFocusPainted(false);
        northButton.setFocusable(false);
        northButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                northButtonActionPerformed(evt);
            }
        });

        southButton.setFont(new java.awt.Font("Open Sans", 1, 12)); // NOI18N
        southButton.setForeground(new java.awt.Color(255, 92, 92));
        southButton.setText("South");
        southButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        southButton.setFocusable(false);
        southButton.setName(""); // NOI18N
        southButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                southButtonActionPerformed(evt);
            }
        });

        eastButton.setFont(new java.awt.Font("Open Sans", 1, 12)); // NOI18N
        eastButton.setForeground(new java.awt.Color(255, 92, 92));
        eastButton.setText("East");
        eastButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        eastButton.setFocusable(false);
        eastButton.setName(""); // NOI18N
        eastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eastButtonActionPerformed(evt);
            }
        });

        roomNameLabel.setFont(new java.awt.Font("Open Sans", 1, 14)); // NOI18N
        roomNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roomNameLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        restartButton.setText("Restart");
        restartButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        restartButton.setFocusable(false);
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });

        turnsTextLabel.setText("Turns:");

        turnsNumberLabel.setText("0");

        northDoorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/move/opening.png"))); // NOI18N
        northDoorLabel.setText("jLabel1");
        northDoorLabel.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/move/closedNorth.png"))); // NOI18N
        northDoorLabel.setEnabled(false);
        roomImage.add(northDoorLabel);
        northDoorLabel.setBounds(100, 0, 100, 100);

        eastDoorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/move/opening.png"))); // NOI18N
        eastDoorLabel.setText("jLabel2");
        eastDoorLabel.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/move/closedEast.png"))); // NOI18N
        eastDoorLabel.setEnabled(false);
        roomImage.add(eastDoorLabel);
        eastDoorLabel.setBounds(200, 100, 100, 100);

        southDoorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/move/opening.png"))); // NOI18N
        southDoorLabel.setText("jLabel3");
        southDoorLabel.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/move/closedSouth.png"))); // NOI18N
        southDoorLabel.setEnabled(false);
        roomImage.add(southDoorLabel);
        southDoorLabel.setBounds(100, 200, 100, 100);

        westDoorLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/move/opening.png"))); // NOI18N
        westDoorLabel.setText("jLabel4");
        westDoorLabel.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/move/closedWest.png"))); // NOI18N
        westDoorLabel.setEnabled(false);
        roomImage.add(westDoorLabel);
        westDoorLabel.setBounds(0, 100, 100, 100);

        roomImageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        roomImageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/move/cell.png"))); // NOI18N
        roomImageLabel.setAlignmentY(0.0F);
        roomImageLabel.setFocusable(false);
        roomImageLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        roomImageLabel.setName(""); // NOI18N
        roomImage.add(roomImageLabel);
        roomImageLabel.setBounds(0, 0, 300, 300);

        westButton.setFont(new java.awt.Font("Open Sans", 1, 12)); // NOI18N
        westButton.setForeground(new java.awt.Color(255, 92, 92));
        westButton.setText("West");
        westButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        westButton.setFocusable(false);
        westButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                westButtonActionPerformed(evt);
            }
        });

        pickaxeLabel.setText("Pickaxe");

        pickaxeButton.setText("Use");
        pickaxeButton.setEnabled(false);
        pickaxeButton.setFocusable(false);
        pickaxeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickaxeButtonActionPerformed(evt);
            }
        });

        pickaxeHeadImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/move/pickaxeHead.png"))); // NOI18N
        pickaxeHeadImage.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/move/pickaxeHeadEmpty.png"))); // NOI18N
        pickaxeHeadImage.setEnabled(false);

        pickaxeHandleImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/move/pickaxeHandle.png"))); // NOI18N
        pickaxeHandleImage.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource("/move/pickaxeHandleEmpty.png"))); // NOI18N
        pickaxeHandleImage.setEnabled(false);

        javax.swing.GroupLayout movePanelLayout = new javax.swing.GroupLayout(movePanel);
        movePanel.setLayout(movePanelLayout);
        movePanelLayout.setHorizontalGroup(
            movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movePanelLayout.createSequentialGroup()
                .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(movePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(westButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(pickaxeHeadImage)
                                .addGroup(movePanelLayout.createSequentialGroup()
                                    .addGap(40, 40, 40)
                                    .addComponent(pickaxeHandleImage)))))
                    .addGroup(movePanelLayout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(turnsTextLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(turnsNumberLabel)))
                .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(movePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, movePanelLayout.createSequentialGroup()
                                .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(movePanelLayout.createSequentialGroup()
                                        .addComponent(roomImage, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18))
                                    .addGroup(movePanelLayout.createSequentialGroup()
                                        .addComponent(southButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(129, 129, 129)))
                                .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(eastButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, movePanelLayout.createSequentialGroup()
                                        .addComponent(restartButton)
                                        .addGap(19, 19, 19))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, movePanelLayout.createSequentialGroup()
                                .addComponent(northButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(142, 142, 142)
                                .addComponent(pickaxeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, movePanelLayout.createSequentialGroup()
                                .addComponent(pickaxeLabel)
                                .addGap(13, 13, 13))))
                    .addGroup(movePanelLayout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(roomNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        movePanelLayout.setVerticalGroup(
            movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(movePanelLayout.createSequentialGroup()
                .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(movePanelLayout.createSequentialGroup()
                            .addGap(49, 49, 49)
                            .addComponent(pickaxeLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pickaxeButton)
                            .addGap(148, 148, 148)
                            .addComponent(eastButton))
                        .addGroup(movePanelLayout.createSequentialGroup()
                            .addGap(19, 19, 19)
                            .addComponent(roomNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(northButton)
                            .addGap(18, 18, 18)
                            .addComponent(roomImage, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(movePanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pickaxeHeadImage)
                            .addGroup(movePanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(pickaxeHandleImage)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(westButton)
                        .addGap(134, 134, 134)))
                .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(movePanelLayout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(southButton)
                        .addContainerGap(44, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, movePanelLayout.createSequentialGroup()
                        .addGroup(movePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(restartButton)
                            .addComponent(turnsTextLabel)
                            .addComponent(turnsNumberLabel))
                        .addGap(30, 30, 30))))
        );

        getContentPane().add(movePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 30, 570, 520));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When North pressed, process movement
     *
     * @param evt when button is pressed
     */
    private void northButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_northButtonActionPerformed
        // Give direction, and way to move back to proccess
        checkMove( 'N', 'S' );
    }//GEN-LAST:event_northButtonActionPerformed

    /**
     * When East pressed, process movement
     *
     * @param evt when button is pressed
     */
    private void eastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eastButtonActionPerformed
        // Give direction, and way to move back to proccess
        checkMove( 'E', 'W' );
    }//GEN-LAST:event_eastButtonActionPerformed

    /**
     * When South pressed, process movement
     *
     * @param evt when button is pressed
     */
    private void southButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_southButtonActionPerformed
        // Give direction, and way to move back to proccess
        checkMove( 'S', 'N' );
    }//GEN-LAST:event_southButtonActionPerformed

    /**
     * When West pressed, process movement
     *
     * @param evt when button is pressed
     */
    private void westButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_westButtonActionPerformed
        // Give direction, and way to move back to proccess
        checkMove( 'W', 'E' );
    }//GEN-LAST:event_westButtonActionPerformed

    /**
     * When Restart pressed, go back to original state
     *
     * @param evt when button is pressed
     */
    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        // Let the game move variables back to start
        game.restart();

        // Change the buttons to original states
        pickaxeButton.setEnabled( false );
        pickaxeHeadImage.setEnabled( false );
        pickaxeHandleImage.setEnabled( false );

        // Reset Pickaxe variables
        game.setPickaxeHead( true );
        game.setPickaxeHandle( true );
        pickaxe = 0;

        // Reset UI for starting room
        checkRoom();
    }//GEN-LAST:event_restartButtonActionPerformed

    /**
     * When Pickaxe Button pressed, allow for new movement
     *
     * @param evt when button is pressed
     */
    private void pickaxeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickaxeButtonActionPerformed
        // Allow for all buttons to be pressed
        northButton.setEnabled( true );
        southButton.setEnabled( true );
        eastButton.setEnabled( true );
        westButton.setEnabled( true );

        // Change colour so user knows pickaxe move
        northButton.setForeground( Color.green );
        westButton.setForeground( Color.green );
        southButton.setForeground( Color.green );
        eastButton.setForeground( Color.green );
    }//GEN-LAST:event_pickaxeButtonActionPerformed

    /**
     * Check new room, change UI for new movement
     *
     * @param evt when button is pressed
     */
    private void checkRoom() {
        // Check if room has north connection
        if( game.getRoom().isNorth() ) {
            // Allows for north movement, and shows user
            northButton.setEnabled( true );
            northButton.setForeground( Color.blue );
            northDoorLabel.setEnabled( true );
        } else {
            // Disallows for north movement, and shows user
            northButton.setEnabled( false );
            northButton.setForeground( Color.red );
            northDoorLabel.setEnabled( false );
        }

        // Check if room has south connection
        if( game.getRoom().isSouth() ) {
            // Allows for south movement, and shows user
            southButton.setEnabled( true );
            southButton.setForeground( Color.blue );
            southDoorLabel.setEnabled( true );
        } else {
            // Disallows for south movement, and shows user
            southButton.setEnabled( false );
            southButton.setForeground( Color.red );
            southDoorLabel.setEnabled( false );
        }

        // Check if room has east connection
        if( game.getRoom().isEast() ) {
            // Allows for east movement, and shows user
            eastButton.setEnabled( true );
            eastButton.setForeground( Color.blue );
            eastDoorLabel.setEnabled( true );
        } else {
            // Disallows for east movement, and shows user
            eastButton.setEnabled( false );
            eastButton.setForeground( Color.red );
            eastDoorLabel.setEnabled( false );
        }

        // Check if room has west connection
        if( game.getRoom().isWest() ) {
            // Allows for west movement, and shows user
            westButton.setEnabled( true );
            westButton.setForeground( Color.blue );
            westDoorLabel.setEnabled( true );
        } else {
            // Disallows for west movement, and shows user
            westButton.setEnabled( false );
            westButton.setForeground( Color.red );
            westDoorLabel.setEnabled( false );
        }

        // Change name and number of turn labels
        roomNameLabel.setText( game.getRoom().getName() );
        turnsNumberLabel.setText( Integer.toString( game.getTurns() ) );

        // Checks if room contains pickaxe items
        if( game.getRoom().isPickaxeHead() ) {
            // Prompts user, they found pickaxe head
            JOptionPane.showMessageDialog( null, "You found the pickaxe head!" );
            // UI shows user they found pickaxe head
            pickaxeHeadImage.setEnabled( true );
            // Stops the user from being prompted on revisit
            game.setPickaxeHead( false );
            // Updates pickaxe items collected
            pickaxe++;
        } else if( game.getRoom().isPickaxeHandle() ) {
            // Prompts user, they found pickaxe handle
            JOptionPane.showMessageDialog( null, "You found the pickaxe handle!" );
            // UI shows user they found pickaxe head
            pickaxeHandleImage.setEnabled( true );
            // Stops the user from being prompted on revisit
            game.setPickaxeHandle( false );
            // Updates pickaxe items collected
            pickaxe++;
        }

        // Checks how many pickaxe items have been collected
        if( pickaxe == 2 ) {
            // Prompts user for pickaxe use
            JOptionPane.showMessageDialog( null, "You can now use the pickaxe!" );
            // Allows the user to use pickaxe
            pickaxeButton.setEnabled( true );
            // Stops re-prompting user each turn
            pickaxe = 0;
        }

        // Checks to see if user is in the end room
        if( game.getRoom().isEnd() ) {
            // Prompts user that they have won
            JOptionPane.showMessageDialog( null, "You win. It took " + game.getTurns() + " turns." );
            // Closes appliation
            System.exit( 0 );
        }
    }

    /**
     * Checks if valid move, and moves player accordingly
     *
     * @param direction
     * @param oppositeDirection
     */
    private void checkMove( char direction, char oppositeDirection ) {
        try {
            // Attempts to move user in requested direction
            game.move( direction );
            // Attempts to check the new room
            checkRoom();
            // Catches error for moving outside of grid, or to unspecified location
        } catch( NullPointerException | ArrayIndexOutOfBoundsException e ) {
            // Prompts user the invalidity of move
            JOptionPane.showMessageDialog( null, "Bad luck, you did not find a room." );
            // Moves user back to original room
            game.move( oppositeDirection );
            // Sets UI up for original room
            checkRoom();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main( String args[] ) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for( javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels() ) {
                if( "Nimbus".equals( info.getName() ) ) {
                    javax.swing.UIManager.setLookAndFeel( info.getClassName() );
                    break;
                }
            }
        } catch( ClassNotFoundException ex ) {
            java.util.logging.Logger.getLogger( Move.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch( InstantiationException ex ) {
            java.util.logging.Logger.getLogger( Move.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch( IllegalAccessException ex ) {
            java.util.logging.Logger.getLogger( Move.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        } catch( javax.swing.UnsupportedLookAndFeelException ex ) {
            java.util.logging.Logger.getLogger( Move.class.getName() ).log( java.util.logging.Level.SEVERE, null, ex );
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater( () -> {
            new Move().setVisible( true );
        } );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton eastButton;
    private javax.swing.JLabel eastDoorLabel;
    private javax.swing.JPanel movePanel;
    private javax.swing.JButton northButton;
    private javax.swing.JLabel northDoorLabel;
    private javax.swing.JButton pickaxeButton;
    private javax.swing.JLabel pickaxeHandleImage;
    private javax.swing.JLabel pickaxeHeadImage;
    private javax.swing.JLabel pickaxeLabel;
    private javax.swing.JButton restartButton;
    private javax.swing.JLayeredPane roomImage;
    private javax.swing.JLabel roomImageLabel;
    private javax.swing.JLabel roomNameLabel;
    private javax.swing.JButton southButton;
    private javax.swing.JLabel southDoorLabel;
    private javax.swing.JLabel turnsNumberLabel;
    private javax.swing.JLabel turnsTextLabel;
    private javax.swing.JButton westButton;
    private javax.swing.JLabel westDoorLabel;
    // End of variables declaration//GEN-END:variables
}
